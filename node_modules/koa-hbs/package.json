{
  "name": "koa-hbs",
  "version": "0.9.0",
  "description": "Handlebars Templates via Generators for Koa",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/gilt/koa-hbs.git"
  },
  "homepage": "https://github.com/gilt/koa-hbs/",
  "scripts": {
    "test": "make test"
  },
  "keywords": [
    "koa",
    "handlebars",
    "template",
    "view",
    "render"
  ],
  "author": {
    "name": "Joe Wilm",
    "email": "jdwilm@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "glob": "^7.0.5",
    "handlebars": "^4.0.5"
  },
  "devDependencies": {
    "co": "^4.6.0",
    "koa": "^1.2.0",
    "koa-router": "^5.4.0",
    "mocha": "^3.1.2",
    "supertest": "^2.0.1"
  },
  "engines": {
    "node": ">= 4.0.0"
  },
  "readme": "[koa]:https://github.com/koajs/koa/\n[handlebars]:http://handlebarsjs.com\nkoa-hbs\n=======\n\n[Handlebars][handlebars] templates for [Koa][koa]\n\n[![Build Status][travis-badge]][repo-url]\n\n## Usage\nkoa-hbs is middleware. We stash an instance of koa-hbs for you in the library\nso you don't have to manage it separately. Configure the default instance by\npassing an [options](#options) hash to #middleware. To render a template then,\njust `yield this.render('templateName');`. Here's a basic app demonstrating all that:\n\n```javascript\nvar koa = require('koa');\nvar hbs = require('koa-hbs');\n\nvar app = koa();\n\n// koa-hbs is middleware. `use` it before you want to render a view\napp.use(hbs.middleware({\n  viewPath: __dirname + '/views'\n}));\n\n// Render is attached to the koa context. Call `this.render` in your middleware\n// to attach rendered html to the koa response body.\napp.use(function *() {\n  yield this.render('main', {title: 'koa-hbs'});\n})\n\napp.listen(3000);\n```\n\nAfter a template has been rendered, the template function is cached. `#render`\naccepts two arguements - the template to render, and an object containing local\nvariables to be inserted into the template. The result is assigned to Koa's\n`this.response.body`.\n\n## Options\nThe plan for koa-hbs is to offer identical functionality as express-hbs\n(eventaully). These options are supported _now_.\n\n#### `viewPath` _required_\nType: `Array|String`  \nFull path from which to load templates\n\n#### `handlebars`\nType:`Object:Handlebars`  \nPass your own instance of handlebars\n\n#### `templateOptions`\nType: `Object`  \nHash of [handlebars options](http://handlebarsjs.com/execution.html#Options) to\npass to `template()`\n\n#### `extname`\nType:`String`  \nAlter the default template extension (default: `'.hbs'`)\n\n#### `partialsPath`\nType:`Array|String`  \nFull path to partials directory\n\n#### `defaultLayout`\nType:`String`  \nName of the default layout\n\n#### `layoutsPath`\nType:`String`  \nFull path to layouts directory\n\n#### `contentHelperName`\nType:`String`  \nAlter `contentFor` helper name\n\n#### `blockHelperName`\nType:`String`  \nAlter `block` helper name\n\n#### `disableCache`\nType:`Boolean`  \nDisable template caching\n\n## Registering Helpers\nHelpers are registered using the #registerHelper method. Here is an example\nusing the default instance (helper stolen from official Handlebars\n[docs](http://handlebarsjs.com):\n\n```javascript\nhbs = require('koa-hbs');\n\nhbs.registerHelper('link', function(text, url) {\n  text = hbs.Utils.escapeExpression(text);\n  url  = hbs.Utils.escapeExpression(url);\n\n  var result = '<a href=\"' + url + '\">' + text + '</a>';\n\n  return new hbs.SafeString(result);\n});\n```\nYour helper is then accessible in all views by using, `{{link \"Google\" \"http://google.com\"}}`\n\nThe `registerHelper`, `Utils`, and `SafeString` methods all proxy to an\ninternal Handlebars instance. If passing an alternative instance of\nHandlebars to the middleware configurator, make sure to do so before\nregistering helpers via the koa-hbs proxy of the above functions, or\njust register your helpers directly via your Handlebars instance.\n\nYou can also access the current Koa context in your helper. If you want to have\na helper that outputs the current URL, you could write a helper like the following\nand call it in any template as `{{requestURL}}`.\n\n```\nhbs.registerHelper('requestURL', function() {\n  var url = hbs.templateOptions.data.koa.request.url;\n  return url;\n});\n```\n\n## Registering Partials\nThe simple way to register partials is to stick them all in a directory, and\npass the `partialsPath` option when generating the middleware. Say your views\nare in `./views`, and your partials are in `./views/partials`. Configuring the\nmiddleware via\n\n```\napp.use(hbs.middleware({\n  viewPath: __dirname + '/views',\n  partialsPath: __dirname + '/views/partials'\n}));\n```\n\nwill cause them to be automatically registered. Alternatively, you may register\npartials one at a time by calling `hbs.registerPartial` which proxies to the\ncached handlebars `#registerPartial` method.\n\n## Layouts\nPassing `defaultLayout` with the a layout name will cause all templates to be\ninserted into the `{{{body}}}` expression of the layout. This might look like\nthe following.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>{{title}}</title>\n</head>\n<body>\n  {{{body}}}\n</body>\n</html>\n```\n\nIn addition to, or alternatively, you may specify a layout to render a template\ninto. Simply specify `{{!< layoutName }}` somewhere in your template. koa-hbs\nwill load your layout from `layoutsPath` if defined, or from `viewPath`\notherwise. If `viewPath` is set to an Array of paths, **_the first path in the\narray will be assumed to contain the layout named._**\n\nAt this time, only a single content block (`{{{body}}}`) is supported.\n\n## Overriding Layouts using Locals\n\nAs of version 0.9.0, it's possible to override the layout used for rendering,\nusing `locals`. For example:\n\n```js\nrouter.get('/', function *() {\n  yield this.render('foo', {\n    layout: 'bar'\n  });\n });\n ```\n\nSee the [tests](https://github.com/gilt/koa-hbs/blob/master/test/app/index.js#L44)\nfor more.\n\n## Block content\nReserve areas in a layout by using the `block` helper like so.\n\n```html\n{{#block \"sidebar\"}}\n  <!-- default content for the sidebar block -->\n{{/block}}\n```\n\nThen in a template, use the `contentFor` helper to render content into the\nblock.\n\n```html\n{{#contentFor \"sidebar\"}}\n  <aside>\n    <h2>{{sidebarTitleLocal}}</h2>\n    <p>{{sidebarContentLocal}}</p>\n  </aside>\n{{/contentFor}}\n```\n\n## Disable Template Caching\nTo disable the caching of templates and partials, use the `disableCache` option.\nSet this option to `true` to disable caching. Default is `false`.\n*Remember to set this option to `false` for production environments, or performance\ncould be impacted!*\n\n## Locals\n\nApplication local variables (```[this.state](https://github.com/koajs/koa/blob/master/docs/api/context.md#ctxstate)```) are provided to all templates rendered within the application.\n\n```javascript\napp.use(function *(next) {\n  this.state.title = 'My App';\n  this.state.email = 'me@myapp.com';\n  yield next;\n});\n```\n\nThe state object is a JavaScript Object. The properties added to it will be\nexposed as local variables within your views.\n\n```\n<title>{{title}}</title>\n\n<p>Contact : {{email}}</p>\n```\n\n## Example\nYou can run the included example via `npm install koa` and\n`node --harmony app.js` from the example folder.\n\n## Unsupported Features\n\nHere's a few things _koa-hbs_ does not plan to support unless someone can\nprovide really compelling justification.\n\n### Async Helpers\n_koa-hbs_ does not support asynchronous helpers. No, really - just load your\ndata before rendering a view. This helps on performance and separation of\nconcerns in your app.\n\n## Handlebars Version\n\nAs of koa-hbs@0.9.0, the version of the Handlebars dependency bundled with this\nmodule has been updated to 4.0.x. If this causes conflicts for your project, you\nmay pass your own instance of Handlebars to the module, or downgrade to the last\n0.8.x version.\n\n## Credits\nFunctionality and code were inspired/taken from\n[express-hbs](https://github.com/barc/express-hbs/).\nMany thanks to [@jwilm](https://github.com/jwilm) for authoring this middleware.\n\n[travis-badge]: https://travis-ci.org/gilt/koa-hbs.png?branch=master\n[repo-url]: https://travis-ci.org/gilt/koa-hbs\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gilt/koa-hbs/issues"
  },
  "_id": "koa-hbs@0.9.0",
  "_from": "koa-hbs@*"
}
