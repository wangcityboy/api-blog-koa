{
  "name": "slashes",
  "version": "1.0.5",
  "description": "Add or strip backslashes.",
  "main": "slashes.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com:ChrisAckerman/node-slashes"
  },
  "keywords": [
    "add",
    "strip",
    "remove",
    "slash",
    "backslash",
    "escape",
    "unescape",
    "php"
  ],
  "author": {
    "name": "Chris Ackerman",
    "email": "bluejeansandrain@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ChrisAckerman/node-slashes/issues"
  },
  "homepage": "https://github.com/ChrisAckerman/node-slashes",
  "readme": "# slashes\n\nAdd or strip backslashes.\n\nProvides two methods, `add` and `strip` which are almost the same as PHP's `addslashes` and `stripslashes` functions\nrespectively.\n\nThe `add` method will prefix backslash (`\\`), double quote (`\"`), and single quote (`'`) characters with backslashes.\nNull (`\\0`) characters will be replaced with backslash zero `\"\\\\0\"`, and newline (`\\n`) characters will be replaced with\n`\"\\\\n\"`. The newline replacement differs from PHP because JavaScript has ASI (auto semicolon insertion) at the end of\neach line, so a newline in a JavaScript string literal does not preserve the newline character correctly.\n\nThe `strip` method replaces all sequences of two characters that start with a backslash, with the second character in\nthe sequence. There are three caveats. A single non-escaped slash at the end of the string will be removed. Backslash\nzero `\"\\\\0\"` will become a null (`\\0`) character. Backslash 'n' `\"\\\\n\"` will become a newline (`\\n`) character.\n\nThe goal of this utility is to make a string safe for concatenation or injection into JavaScript source.\n\n```js\nvar foo = \"\\\\bar\";\nvar source = \"console.log('\" + bar + \"');\";\neval(source);\n```\n\nYou might expect the above snippet to output `\\bar` but instead you will see `ar`, because the source string ends up\nbeing `console.log('\\bar');` which is interpreted as starting with an escaped \"b\" rather than a backslash and then a\n\"b\". It can be fixed using the `add` method.\n\n```js\nvar foo = \"\\\\bar\";\nvar source = \"console.log('\" + slashes.add(bar) + \"');\";\neval(source);\n```\n\nNow the source comes out as `console.log('\\\\bar');` and the output will be `\\bar`.\n\n## Install\n\n```sh\nnpm install slashes --save\n```\n\n## Usage\n\n```\nslashes.add(string, [number])\nslashes.strip(string, [number])\n```\n\nIf a non-string value is passed as the first parameter, it will be coerced to a string.\n\nIf a non-number is passed as the second parameter, it will be coerced to a number. Negative numbers are equivalent to\ntheir positive counter parts. Zero is the same as one.\n\n### Examples\n```js\nvar slashes = require('slashes');\n\nvar test = \"'test'\\n\\\"ing\\\"\\0\";\nvar added = slashes.add(test);\nvar stripped = slashes.strip(added);\n\nconsole.log(\"test:\\n%s\\n\", test);\nconsole.log(\"added:\\n%s\\n\", added);\nconsole.log(\"stripped:\\n%s\\n\", stripped);\n```\n\nOutput should be...\n```\ntest:\n'test'\n\"ing\"\n\nadded:\n\\'test\\'\n\\\"ing\\\"\\0\n\nstripped:\n'test'\n\"ing\"\n\n```\n\nBoth methods also take an optional second number parameter, 1 or greater. This is equivalent to calling the method\nthat many times.\n```js\nslashes.add(string, 2);\n// ...is the same as...\nslashes.add(slashes.add(string));\n\nslashes.strip(string, 2);\n// ...is the same as...\nslashes.strip(slashes.strip(string));\n```\n\nNote that in JavaScript, `\"\\0\"` and `\"\\u0000\"` are identical. The `add` method will convert both to `\"\\\\0\"`.",
  "readmeFilename": "README.md",
  "_id": "slashes@1.0.5",
  "dist": {
    "shasum": "ee139b64d799ed67702b33e5cbb15242dd7c0b83"
  },
  "_from": "slashes@^1.0.5",
  "_resolved": "https://registry.npmjs.org/slashes/-/slashes-1.0.5.tgz"
}
